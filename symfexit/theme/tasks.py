import os
import subprocess

from django.conf import settings

from symfexit.tenants.models import Client
from symfexit.theme.models import CurrentThemeVersion, TailwindKey
from symfexit.theme.utils import get_theme_filename, get_time_millis
from symfexit.worker import logger
from symfexit.worker.registry import task_registry

NPM_COMMAND = os.getenv("NPM_COMMAND", "npm")

def write_out_overrides():
    with open(settings.DYNAMIC_THEME_WORKING_DIR / "src" / "theme-overrides.css", "w") as f:
        print('/* This file is generated by symfexit */', file=f)
        print('@theme {', file=f)
        for theme_key in TailwindKey.objects.all():
            print(f'  --{theme_key.name}: {theme_key.value};', file=f)
        print('}', file=f)


@task_registry.register("rebuild_theme")
def rebuild_theme(*, tenant: Client):
    logger.log(f"Rebuilding theme for tentant {tenant.name}")
    input_css = settings.BASE_DIR / "theme" / "static_src" / "src" / "styles.css"
    write_out_overrides()

    new_env = os.environ.copy()
    new_env["NODE_ENV"] = "production"

    version = get_time_millis()
    output_name = get_theme_filename(tenant, version)
    try:
        stdout = subprocess.check_output(
            [
                NPM_COMMAND,
                "run",
                "tailwindcss",
                "--",
                "--minify",
                "-i",
                input_css,
                "-o",
                settings.DYNAMIC_THEME_ROOT / output_name,
            ],
            cwd=settings.DYNAMIC_THEME_WORKING_DIR,
            stderr=subprocess.STDOUT,
            env=new_env,
        )
        for line in stdout.decode("utf-8").split("\n"):
            logger.log(line)
        logger.log("Rebuilding theme done")
        CurrentThemeVersion.objects.create(version=version)
    except subprocess.CalledProcessError as e:
        logger.log("Rebuilding theme failed")
        for line in e.output.decode("utf-8").split("\n"):
            logger.log(line)
        return
