from unittest import skipIf

from django.conf import settings
from django.contrib.auth import get_user_model
from django.test import TestCase
from django.urls import reverse
from django_tenants.test.cases import FastTenantTestCase
from django_tenants.test.client import TenantClient

from symfexit.theme.models import CurrentThemeVersion, TailwindKey
from symfexit.theme.tasks import write_out_overrides
from symfexit.worker.models import Task

User = get_user_model()

is_npm_available = None


def npm_available():
    global is_npm_available  # noqa: PLW0603
    if is_npm_available is not None:
        return is_npm_available
    try:
        import subprocess  # noqa: PLC0415

        subprocess.check_call(
            ["npm", "install"], cwd=settings.SYMFEXIT_DIR / "theme" / "static_src"
        )
        is_npm_available = True
        return True
    except (FileNotFoundError, subprocess.CalledProcessError):
        is_npm_available = False
        return False


class TestThemeWriter(TestCase):
    @skipIf(not npm_available(), "npm not available")
    def test_write_out_overrides(self):
        TailwindKey.objects.create(
            name="color-primary",
            value="#ff0000",
        )
        write_out_overrides()

        with open(
            settings.SYMFEXIT_DIR / "theme" / "static_src" / "src" / "theme-overrides.css"
        ) as f:
            content = f.read()
            self.assertIn("--color-primary: #ff0000;", content)
            self.assertIn("/* This file is generated by symfexit */", content)
            self.assertIn("@theme {", content)
            self.assertIn("}", content)


class TestAdminThemeWriter(FastTenantTestCase):
    def setUp(self):
        super().setUp()
        self.client = TenantClient(self.tenant)
        self.client.force_login(User.objects.create_superuser(email="testuser@example.com"))

    @skipIf(not npm_available(), "npm not available")
    def test_color_change_from_admin(self):
        response = self.client.post(
            reverse("admin:theme_tailwindkey_add"),
            {
                "name": "color-primary",
                "value": "#ff1234",
            },
        )
        self.assertEqual(response.status_code, 302)
        self.assertEqual(TailwindKey.objects.count(), 1)

        response = self.client.post(reverse("admin:rebuild_theme"), follow=True)
        # Check that it redirected
        self.assertEqual(len(response.redirect_chain), 1)
        self.assertContains(response, "Rebuilding theme, refresh to see progress")

        self.assertEqual(Task.objects.count(), 1)
        self.assertEqual(Task.objects.first().name, "rebuild_theme")
        self.assertEqual(Task.objects.first().status, Task.Status.COMPLETED)
        self.assertTrue(
            "Rebuilding theme done" in Task.objects.first().output, Task.objects.first().output
        )

        self.assertEqual(CurrentThemeVersion.objects.count(), 1)
        current_theme_version = CurrentThemeVersion.objects.first()

        response = self.client.get("/")
        self.assertContains(response, current_theme_version.version)
