"""
Django settings for symfexit project.

Generated by 'django-admin startproject' using Django 4.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import logging
import os
from collections import OrderedDict
from pathlib import Path

import dj_database_url
from django.utils.translation import gettext_lazy as _

from symfexit.root.utils import enable_if

try:
    import django_browser_reload  # noqa

    django_browser_reload_enabled = True
except ImportError:
    django_browser_reload_enabled = False

logger = logging.getLogger(__name__)

# Sentinel objects that are distinct from None
_NOT_SET = object()


class Misconfiguration(Exception):
    """Exception that is raised when something is misconfigured in this file."""


# Many of the settings are dependent on the environment we're running in.
# The default environment is development, so the programmer doesn't have to set anything
SYMFEXIT_ENV = os.environ.get("SYMFEXIT_ENV", "development")

_environments = {"development", "production", "staging", "testing"}


def setting(*, development, production, staging=_NOT_SET, testing=_NOT_SET):
    """Generate a setting depending on the SYMFEXIT_ENV and the arguments.

    This function is meant for static settings that depend on the SYMFEXIT_ENV. If the
    staging or testing arguments are left to their defaults, they will fall back to
    the production and development settings respectively.
    """
    if SYMFEXIT_ENV == "development" or (SYMFEXIT_ENV == "testing" and testing is _NOT_SET):
        return development
    if SYMFEXIT_ENV == "testing":
        return testing
    if SYMFEXIT_ENV == "production" or (SYMFEXIT_ENV == "staging" and staging is _NOT_SET):
        return production
    if SYMFEXIT_ENV == "staging":
        return staging
    raise Misconfiguration(f"Set SYMFEXIT_ENV to one of: {', '.join(_environments)}")


def setting_from_env(
    name, *, production=_NOT_SET, staging=_NOT_SET, testing=_NOT_SET, development=None
):
    """Generate a setting that's overridable by the process environment.

    This will raise an exception if a default is not set for production. Because we use
    the sentinel value _NOT_SET, you can still set a default of None for production if wanted.

    As with :func:`setting` the staging and testing values will fall back to production
    and development. So if an environment variable is required in production, and no default
    is set for staging, staging will also raise the exception.
    """
    try:
        return os.environ[name]
    except KeyError:
        if SYMFEXIT_ENV == "production" or (SYMFEXIT_ENV == "staging" and staging is _NOT_SET):
            if production is _NOT_SET and os.environ.get("MANAGE_PY", "0") == "0":
                # pylint: disable=raise-missing-from
                raise Misconfiguration(
                    f"Environment variable `{name}` must be supplied in production"
                ) from None
            if production is _NOT_SET and os.environ.get("MANAGE_PY", "0") == "1":
                logger.warning("Ignoring unset %s because we're running a management command", name)
                return development
            return production
        if SYMFEXIT_ENV == "staging":
            return staging
        if SYMFEXIT_ENV == "development" or (SYMFEXIT_ENV == "testing" and testing is _NOT_SET):
            return development
        if SYMFEXIT_ENV == "testing":
            return testing
        # pylint: disable=raise-missing-from
        raise Misconfiguration(f"SYMFEXIT_ENV set to unsupported value: {SYMFEXIT_ENV}") from None


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent
SYMFEXIT_DIR = BASE_DIR / "symfexit"

CONTENT_DIR = Path(setting_from_env("CONTENT_DIR", development=BASE_DIR / "content"))

SYMFEXIT_ENV = os.getenv("SYMFEXIT_ENV", "development")

SINGLE_SITE = setting_from_env("SINGLE_SITE", development=True, production=False)
SINGLE_SITE_DOMAIN = setting_from_env("SINGLE_SITE_DOMAIN", development="127.0.0.1")

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = setting_from_env(
    "SYMFEXIT_SECRET_KEY",
    development="django-insecure-7b_@jve6sxl8qz4yc+hc@$(+rr_xiq4y46f^-8y%)&v!%sao6+",
)

# https://docs.djangoproject.com/en/5.0/ref/settings/#secure-proxy-ssl-header
SECURE_PROXY_SSL_HEADER = setting(development=None, production=("HTTP_X_FORWARDED_PROTO", "https"))

MOLLIE_API_KEY = setting_from_env("MOLLIE_API_KEY", production=None)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = setting(development=True, production=False, testing=False)

RUN_TASKS_SYNC = setting_from_env(
    "RUN_TASKS_SYNC", development=False, production=False, testing=True
)

ALLOWED_HOSTS = setting(development=["*"], production=os.getenv("ALLOWED_HOSTS", "").split(","))

if DEBUG:
    CSRF_TRUSTED_ORIGINS = ["https://*.ngrok-free.app"]
else:
    CSRF_TRUSTED_ORIGINS = []

EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"

CONSTANCE_ADDITIONAL_FIELDS = {
    "image_field": [
        "django.forms.FileField",
        {"required": False, "widget": "symfexit.root.helpers.ClearableFileInputFromStr"},
    ]
}

CONSTANCE_BACKEND = "constance.backends.database.DatabaseBackend"

# https://django-constance.readthedocs.io/en/latest/#configuration
CONSTANCE_CONFIG = {
    "SITE_TITLE": ("Membersite", _("Main title of this site")),
    "LOGO_IMAGE": ("", _("Organisation logo"), "image_field"),
    "MAIN_SITE": ("https://roodjongeren.nl/", _("Main site of the organisation")),
    "HOMEPAGE_CURRENT": (
        0,
        _("Current home page (configure this on the home pages admin)"),
    ),
    "PAYMENT_TIERS_JSON": (
        "{}",
        _("JSON with payment tiers (configure this on the membership admin)"),
    ),
}

# Application definition

SHARED_APPS = [
    "django_tenants",
    "symfexit.tenants.apps.TenantsConfig",
    "symfexit.root.apps.SymfexitConfig",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "tailwind",
    "fontawesomefree",
    "tinymce",
    "symfexit.worker.apps.WorkerConfig",
] + enable_if(django_browser_reload_enabled, ["django_browser_reload"])

TENANT_APPS = [
    "tinymce",
    "django.contrib.contenttypes",
    "django.contrib.auth",
    "django.contrib.sessions",
    "django.contrib.messages",
    "tinymce",
    "constance",
    "django_drf_filepond",
    # our own apps
    "symfexit.theme",
    # Order of the adminsite apps is important as MyAdminConfig points to the
    # django.contrib.admin, which contains translations which should be
    # overwritten by our own translations in AdminSiteConfig
    "symfexit.adminsite.apps.AdminSiteConfig",
    "symfexit.emails.apps.EmailTemplateConfig",
    "symfexit.menu.apps.MenuConfig",
    "symfexit.members.apps.MembersConfig",
    "symfexit.payments.apps.PaymentsConfig",
    "symfexit.payments.dummy.apps.PaymentsDummyConfig",
    "symfexit.payments.mollie.apps.PaymentsMollieConfig",
    "symfexit.documents.apps.DocumentsConfig",
    "symfexit.home.apps.HomeConfig",
    "symfexit.signup.apps.SignupConfig",
    "symfexit.membership.apps.MembershipConfig",
    "symfexit.adminsite.apps.MyAdminConfig",
]

if SINGLE_SITE:
    SHARED_APPS = list(OrderedDict.fromkeys(SHARED_APPS + TENANT_APPS))

INSTALLED_APPS = list(OrderedDict.fromkeys(SHARED_APPS + TENANT_APPS))

TENANT_MODEL = "tenants.Client"

TENANT_DOMAIN_MODEL = "tenants.Domain"

MIDDLEWARE = [
    "django_tenants.middleware.main.TenantMainMiddleware",
    # "symfexit.tenants.middleware.TenantConfigMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.locale.LocaleMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
] + enable_if(
    django_browser_reload_enabled,
    ["django_browser_reload.middleware.BrowserReloadMiddleware"],
)

ROOT_URLCONF = "symfexit.root.urls"
PUBLIC_SCHEMA_URLCONF = "symfexit.root.management_urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "constance.context_processors.config",
                "django.template.context_processors.request",
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "symfexit.theme.context.current_theme",
                "symfexit.theme.context.theme_vars",
            ],
            "string_if_invalid": ("ðŸ˜± MISSING VARIABLE %s ðŸ˜±" if DEBUG else ""),
        },
    },
]
CMS_COLOR_SCHEME = "auto"

FORM_RENDERER = "django.forms.renderers.DjangoDivFormRenderer"

WSGI_APPLICATION = "symfexit.root.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

# Configure using env variable DATABASE_URL
DATABASES = {
    "default": dj_database_url.config(
        default="postgres:///symfexit",
        engine="django_tenants.postgresql_backend",
        conn_max_age=600,
        conn_health_checks=True,
    )
}

DATABASE_ROUTERS = ("django_tenants.routers.TenantSyncRouter",)


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

TIME_ZONE = "Europe/Amsterdam"

USE_I18N = True

USE_TZ = True

USE_L10N = True

LANGUAGE_CODE = setting_from_env("DEFAULT_LANGUAGE_CODE", production="nl-NL", development="nl-NL")

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = setting_from_env("STATIC_URL", production="static/", development="static/")
STATIC_ROOT = setting_from_env("STATIC_ROOT")

MEDIA_URL = setting_from_env("MEDIA_URL", production="media/", development="media/")
MEDIA_ROOT = setting_from_env(
    "MEDIA_ROOT", production=CONTENT_DIR / "media", development=CONTENT_DIR / "media"
)
DJANGO_DRF_FILEPOND_UPLOAD_TMP = str(MEDIA_ROOT / "filepond_tmp")
DJANGO_DRF_FILEPOND_FILE_STORE_PATH = str(MEDIA_ROOT / "filepond")

DJANGO_DRF_FILEPOND_PERMISSION_CLASSES = {
    "GET_FETCH": [
        "rest_framework.permissions.IsAuthenticated",
    ],
    "GET_LOAD": [
        "rest_framework.permissions.IsAuthenticated",
    ],
    "POST_PROCESS": [
        "rest_framework.permissions.IsAuthenticated",
    ],
    "GET_RESTORE": [
        "rest_framework.permissions.IsAuthenticated",
    ],
    "DELETE_REVERT": [
        "rest_framework.permissions.IsAuthenticated",
    ],
    "PATCH_PATCH": [
        "rest_framework.permissions.IsAuthenticated",
    ],
}

DYNAMIC_THEME_URL = setting_from_env(
    "DYNAMIC_THEME_URL", production="theme/", development="static/css/dist/"
)
DYNAMIC_THEME_ROOT = setting_from_env(
    "DYNAMIC_THEME_ROOT",
    production=CONTENT_DIR / "theme",
    development=SYMFEXIT_DIR / "theme" / "static" / "css" / "dist",
)
DYNAMIC_THEME_WORKING_DIR = setting_from_env(
    "DYNAMIC_THEME_WORKING_DIR",
    development=SYMFEXIT_DIR / "theme" / "static_src",
)

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

INTERNAL_IPS = [
    "127.0.0.1",
]

TAILWIND_APP_NAME = "theme"

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {
            "level": "DEBUG",
            "class": "logging.StreamHandler",
        },
    },
    "loggers": {
        "": {
            "handlers": ["console"],
            "level": "INFO",
        }
    },
}

# Set the user model to our custom user model
# https://docs.djangoproject.com/en/5.0/ref/settings/#std-setting-AUTH_USER_MODEL

AUTH_USER_MODEL = "members.User"

TINYMCE_DEFAULT_CONFIG = {
    "relative_urls": False,
    "remove_script_host": False,
    "convert_urls": True,
    "menubar": "edit view insert format tools table help",
    "plugins": "advlist autolink lists link charmap print preview anchor searchreplace visualblocks code "
    "fullscreen insertdatetime media table paste code help wordcount spellchecker",
    "toolbar": "undo redo | bold italic underline strikethrough | fontselect fontsizeselect formatselect | alignleft "
    "aligncenter alignright alignjustify | outdent indent |  numlist bullist checklist | forecolor "
    "backcolor casechange permanentpen formatpainter removeformat | pagebreak | charmap emoticons | "
    "fullscreen  preview save print | insertfile image media pageembed template link anchor codesample | "
    "code",
}
